// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  clerk_id   String   
  username String @unique
  fullName String
  email      String   @unique
  password   String?
  rating     Int      @default(1200)
  createdAt  DateTime @default(now())
  postId String[]
  post   Post[]
  userPuzzles userPuzzle[]
  likes       Likes[]
  comments    comments[]
  messages    Message[] 
  chatrooms Chatroom[]  @relation("ChatroomMembers")
  following   Follow[] @relation("UserFollowers") 
  followers   Follow[] @relation("UserFollowing")
}

model Game {
  id        String   @id @default(cuid())
  whiteid   String
  blackid   String
  pgn     String
  result String
  fen String
  createdAt DateTime @default(now())
  post Post[]
}

model Post {
id String @id @default(cuid())
userid String
user   User   @relation(fields: [userid], references: [id])
header String
description String 
createdat DateTime @default(now())
gameId String? @unique
game   Game?   @relation(fields: [gameId], references: [id])
comments comments[]
likes Likes[]
}

model Follow {
  id String @id @default(cuid())
  followerId   String
  followingId  String
  follower     User   @relation("UserFollowers", fields: [followerId], references: [id], map: "Follow_followerId_fkey")
  following    User   @relation("UserFollowing", fields: [followingId], references: [id], map: "Follow_followingId_fkey")
}

model comments {
  id String @id @default(cuid())
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  userid String
  user   User   @relation(fields: [userid], references: [id])
  description String
  createdAt DateTime @default(now())
}
model Likes {
  id String @id @default(cuid())
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  userid String
  user   User   @relation(fields: [userid], references: [id])
  @@unique([postId, userid])
}

model userPuzzle {
  id     String @id @default(cuid())
  userId String 
  user   User   @relation(fields: [userId], references: [id])
  puzzleid String @unique
  puzzle   Puzzle   @relation(fields: [puzzleid], references: [id], map: "userPuzzle_userId_puzzleId_fkey")
  issolved Boolean
  completedDate DateTime @default(now())
}

model Puzzle {
  id String @id
  fen String
  moves String
  puzzlerating Int
  ratingdeviation Int
  Population Int
  numberplayed Int
  theme String
  GameUrl String
  openingTags String? 
  userPuzzles  userPuzzle[]
}

model DailyPuzzle {
  id String @id @default(cuid())
  puzzleId String
  userId String
  rating Int
  completedDate String
}


model Chatroom {
  id        String     @id @default(cuid())
  name      String?
  members   User[]     @relation("ChatroomMembers")
  messages  Message[]
  createdAt DateTime   @default(now())
}

model Message {
  id         String    @id @default(cuid())
  text       String
  sender     User      @relation(fields: [senderId], references: [id])
  senderId   String
  chatroom   Chatroom  @relation(fields: [chatroomId], references: [id])
  chatroomId String
  createdAt  DateTime  @default(now())
}