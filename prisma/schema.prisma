// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  clerk_id   String   
  username   String    @unique
  fullName   String
  email      String    @unique
  password   String?
  rating     Int       @default(1200)
  createdAt  DateTime  @default(now())
  ChessUsername String? @unique
  postId     String[]
  post       Post[]    
  userPuzzles userPuzzle[] 
  likes      Likes[]  
  comments   comments[] 
  messages   Message[] 
  whiteGames Game[] @relation("WhitePlayer")
  blackGames Game[] @relation("BlackPlayer")
  chatrooms  Chatroom[]  @relation("ChatroomMembers")
  following  Follow[] @relation("UserFollowing")
  followers  Follow[] @relation("UserFollowers")
}

model Game {
  id        String   @id @default(cuid())
  whiteid   String
  blackid   String
  pgn       String
  result    String
  fen       String
  createdAt DateTime @default(now())
  post      Post[]
  whitePlayer User @relation("WhitePlayer", fields: [whiteid], references: [id])
  blackPlayer User @relation("BlackPlayer", fields: [blackid], references: [id])
}

model Post {
  id          String     @id @default(cuid())
  userid      String
  user        User       @relation(fields: [userid], references: [id], onDelete: Cascade)
  header      String
  description String 
  createdat   DateTime   @default(now())
  gameId      String?    @unique
  game        Game?      @relation(fields: [gameId], references: [id])
  comments    comments[]
  likes       Likes[]
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], map: "Follow_followerId_fkey", onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], map: "Follow_followingId_fkey", onDelete: Cascade)
}

model comments {
  id          String   @id @default(cuid())
  postId      String
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userid      String
  user        User     @relation(fields: [userid], references: [id], onDelete: Cascade)
  description String
  createdAt   DateTime @default(now())
}

model Likes {
  id      String @id @default(cuid())
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userid  String
  user    User   @relation(fields: [userid], references: [id], onDelete: Cascade)
  @@unique([postId, userid])
}

model userPuzzle {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  puzzleid      String   @unique
  puzzle        Puzzle   @relation(fields: [puzzleid], references: [id], map: "userPuzzle_userId_puzzleId_fkey")
  issolved      Boolean
  completedDate DateTime @default(now())
}

model Puzzle {
  id             String       @id
  fen            String
  moves          String
  puzzlerating   Int
  ratingdeviation Int
  Population     Int
  numberplayed   Int
  theme          String
  GameUrl        String
  openingTags    String? 
  userPuzzles    userPuzzle[]
}

model DailyPuzzle {
  id            String   @id @default(cuid())
  puzzleId      String
  userId        String
  rating        Int
  completedDate String
}

model Chatroom {
  id        String     @id @default(cuid())
  name      String?
  members   User[]     @relation("ChatroomMembers")
  messages  Message[]
  createdAt DateTime   @default(now())
}

model Message {
  id         String    @id @default(cuid())
  text       String
  sender     User      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  chatroom   Chatroom  @relation(fields: [chatroomId], references: [id])
  chatroomId String
  createdAt  DateTime  @default(now())
}